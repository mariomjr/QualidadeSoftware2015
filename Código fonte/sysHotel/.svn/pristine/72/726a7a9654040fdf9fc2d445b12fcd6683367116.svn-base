package org.sysHotel.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.event.ActionEvent;
import javax.inject.Inject;

import org.primefaces.event.SelectEvent;
import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;
import org.sysHotel.dao.QuartoDaoImpl;
import org.sysHotel.entity.Quarto;
import org.sysHotel.enums.EnumAtivoInativo;
import org.sysHotel.interfaces.ICrudPrimeFaces;

@ManagedBean(name = "quartoBean")
@SessionScoped
public class QuartoBean implements Serializable, ICrudPrimeFaces<Quarto>{
	
	private static final long serialVersionUID = -962261095009309042L;

	@Inject
	private Quarto quarto;
	
	private List<Quarto> listQuartos;
	
	private Quarto quartoSelect;
	
	private LazyDataModel<Quarto> lazyListQuarto;
	
	@Inject
	QuartoDaoImpl quartoDao;
	
	public QuartoBean() {
		if (lazyListQuarto == null) {
			lazyListQuarto = new LazyDataModel<Quarto>() {

				private static final long serialVersionUID = 1L;

				@Override
				public List<Quarto> load(int first, int pageSize,String sortField, SortOrder sortOrder,Map<String, String> filters) {
					List<Quarto> l = quartoDao.getRegistros();
					setRowCount(l.size());
					return l;
				}

				@Override
				public Quarto getRowData(String rowKey) {
					if(rowKey != null && !rowKey.equals("null")){
						return quartoDao.getRegistroID(Long.valueOf(rowKey));
					}else{
						return new Quarto();
					}
				}

				@Override
				public Object getRowKey(Quarto object) {
					return object.getId();
				}
			};
		}
	}
	
	@Override
	public void salvarAlterar(ActionEvent actionEvent) {
		teste();
	}

	private void teste() {
		if(getQuarto().getId()== null){
			quartoDao.salvar(quarto);
		}else{
			quartoDao.update(quarto);
		}
	}
	
	@Override
	public void prepararNovoRegistro(ActionEvent actionEvent) {
		setQuarto(new Quarto());
	}
	
	@Override
	public void prepararAlterarRegistro(ActionEvent actionEvent) {
		setQuarto(getQuartoSelect());	
	}
	
	@Override
	public void delete(ActionEvent actionEvent) {
		getQuartoSelect().setAtivoInativo(EnumAtivoInativo.INATIVO);
		quartoDao.update(getQuartoSelect());
	}

	public List<Quarto> getListQuartos() {
		if(listQuartos == null){
			listQuartos = new ArrayList<Quarto>();
		}
		return listQuartos;
	}

	public void setListQuartos(List<Quarto> listQuartos) {
		this.listQuartos = listQuartos;
	}

	public Quarto getQuarto() {
		return quarto;
	}

	public void setQuarto(Quarto quarto) {
		this.quarto = quarto;
	}

	public Quarto getQuartoSelect() {
		if(quartoSelect == null){
			quartoSelect = new Quarto();
		}
		return quartoSelect;
	}

	public void setQuartoSelect(Quarto quartoSelect) {
		this.quartoSelect = quartoSelect;
	}

	@Override
	public void onRowSelect(SelectEvent event) {
	}

	
}
